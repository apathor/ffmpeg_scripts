#!/bin/bash
# gifcut © Mike Lalumiere 2017
# This file is licensed under the GPLv3. Please see LICENSE.
# Requires ffmpeg. Assumes Video4Linux for webcam input.
gifcut() {
    # define usage text
    read -r -d '' use <<EOF
Usage: gifcut [OPTIONS] INFILE OUTFILE
Extract a GIF from a video source using ffmpeg.

OPTIONS
 -h          : Show this helpful text.
 -b START    : Integer seconds offset from the start of the input.
 -c          : Take input from a camera device instead of video file.
 -d DEVICE   : Set V4L device from which to capture video.
 -r FPS      : Integer rate of output GIF in frames per second.
 -s SCALE    : Integer WxH scale to resize frames in output GIF.
 -t DURATION : Integer seconds selection of input file.

gifcut © Mike Lalumiere 2017
EOF

    # check requirements
    if ! type ffmpeg &>/dev/null; then
        echo "${BASH_SOURCE[0]} requires ffmpeg!" >&2
        return 255
    fi
    # accept some options
    local cam dev dur stt fps sca
    while getopts ":b:cd:hr:s:t:" opt; do
        case "$opt" in
            b) # begin seconds into input
                stt="$OPTARG"
                if ! [[ "$stt" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                    echo "Start time must be a number!" >&2
                    return 1
                fi
                ;;
            c) # enable camera mode
                cam=1
                ;;
            d) # file camera device
                dev="$OPTARG"
                if ! [ -e "$dev" ]; then
                    echo "Input device must exist!" >&2
                    return 1
                fi
                ;;
            r) # integer seconds frame rate of output GIF
                fps="$OPTARG"
                if ! [[ "$fps" =~ ^[0-9]+$ ]]; then
                    echo "Frame rate must be a number!" >&2
                    return 1
                fi
                ;;
            s) # WxH integer scale for output GIF
                sca="$OPTARG"
                if ! [[ "$sca" =~ ^[0-9]+x[0-9]+$ ]]; then
                    echo "Scale must be in WxH format!" >&2
                    return 1
                fi
                ;;
            t) # seconds of input video
                dur="$OPTARG"
                if ! [[ "$dur" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                    echo "Duration must be a number!" >&2
                    return 1
                fi
                ;;
            h) # help!
                echo "$use"
                return 1
                ;;
            \?) # unexpected
                printf "Invalid option '-%s'.\n\n%s\n" "$OPTARG"  "$use" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    # accept arguments
    local inp out
    ## input file is first argument or camera device
    if [ -z "$cam" ]; then
        inp="$1"
        shift
    else
        inp="${dev:-/dev/video0}"
    fi
    ## input argument is required
    if [ -z "$inp" ]; then
        echo "$use" >&2
        return 1
    fi
    ## input file must readable
    if ! [ -r "$inp" ] || [ -d "$inp" ]; then
        echo "Input file must be readable!" >&2
        return 2
    fi
    # accept output file argument
    if [ -z "$1" ]; then
        echo "$use" >&2
        return 1
    fi
    out="${1%.gif}.gif"
    ## output file must not exist already
    if [ -e "$out" ]; then
        echo "Will not overwrite file: $out" >&2
        return 2
    fi
    # run ffmpeg to capture the gif
    eval ffmpeg                       \
         "${cam+'-f' 'video4linux2'}" \
         "${stt+'-ss' \"\$stt\"}"     \
         -vsync cfr \
         -i "\"$inp\""                \
         -f gif                       \
         -pix_fmt rgb8               \
         "${dur+'-t' \"\$dur\"}"      \
         "${fps+'-r' \"\$fps\"}"      \
         "${sca+'-s' \"\$sca\"}"      \
         - 2>/dev/null | gifoptimize > "$out"
    # cleanup and debug if conversion failed or output file is missing
    if [ "$?" -ne "0" ]; then
        printf "Something went wrong!\n" >&2
        if [ -e "$out" ]; then rm "$out"; fi
        return 3
    fi
    # success! write the output file
    echo "$out"
}

# gifoptimize < GIF > OPTIMIZED GIF
gifoptimize() {
    if [ -t 0 ]; then return 1; fi
    if type gifsicle &>/dev/null; then
        exec gifsicle -O3 -d3
    else
        exec cat -
    fi
}

# run it unless sourced
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then gifcut "$@"; fi
